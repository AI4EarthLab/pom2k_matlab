function[tb,sb,tclim,sclim,ub,vb,elb,etb,dt,rho,rmean,ssurf,tsurf,dt_3d] = file2ic(file2ic_name)
% **********************************************************************
% *                                                                    *
% * FUNCTION    :  Sets up my own problem.                             *
% *                                                                    *
% * This example read IC from IC.dat file, generated by GRID.f in      *
% * GRID-DATA directory. Only minimal number of fields are read,       *
% * while others are calculated here.                                  *
% *                                                                    *
% **********************************************************************
global im jm kb dx dy h dx_3d dy_3d h_3d z zz dz dzz z_3d zz_3d dz_3d dzz_3d cor cor_3d ...
       uabe uabw rfe rfw ele elw vabn vabs rfn rfs eln els tbe tbw tbn tbs sbe sbw sbn  ...
       sbs ubw ube vbs vbn east_c north_c east_e north_e east_u north_u east_v north_v fsm_3d rot;

t=zeros(im,jm,kb)       ;   s=zeros(im,jm,kb)       ;   rmean=zeros(im,jm,kb);
wusurf=zeros(im,jm)     ;   wvsurf=zeros(im,jm)     ;   tsurf=zeros(im,jm)   ;
ssurf=zeros(im,jm)      ;   tclim=zeros(im,jm,kb)   ;   sclim=zeros(im,jm,kb);
elb=zeros(im,jm)        ;   etb=zeros(im,jm);
rad=0.01745329;
re=6371.E3;
fprintf('(/,'' Read grid and initial conditions '',/) \n');
%---start read--------------
%--- 1D ---
fid = fopen(file2ic_name,'r');
%--------------1 D
name=fscanf(fid,'%s',[1]);
z=fscanf(fid,'%f',[1,kb]);

name=fscanf(fid,'%s',[1]);
zz=fscanf(fid,'%f',[1,kb]);

name=fscanf(fid,'%s',[1]);
dz=fscanf(fid,'%f',[1,kb]);

name=fscanf(fid,'%s',[1]);
dzz=fscanf(fid,'%f',[1,kb]);

%---------------2 D
name=fscanf(fid,'%s',[1]);
east_e=fscanf(fid,'%f',[im,jm]);

name=fscanf(fid,'%s',[1]);
north_e=fscanf(fid,'%f',[im,jm]);

name=fscanf(fid,'%s',[1]);
h=fscanf(fid,'%f',[im,jm]);

%---------------3 D
name=fscanf(fid,'%s',[1]);
for k=1:kb
t(:,:,k)=fscanf(fid,'%f',[im,jm]);
end

name=fscanf(fid,'%s',[1]);
for k=1:kb
s(:,:,k)=fscanf(fid,'%f',[im,jm]);
end

name=fscanf(fid,'%s',[1]);
for k=1:kb
rmean(:,:,k)=fscanf(fid,'%f',[im,jm]);
end

%--- Constant wind stress read here
% (for time dep. read in loop 9000 & interpolate in time)
%---------------2 D
name=fscanf(fid,'%s',[1]);
wusurf(:,:)=fscanf(fid,'%f',[im,jm]);

name=fscanf(fid,'%s',[1]);
wvsurf(:,:)=fscanf(fid,'%f',[im,jm]);

%-----------------read end-------------------
%
% --- calc. surface & lateral BC from climatology
for k=1:kb
    z_3d(:,:,k)=repmat(z(k),im,jm);      zz_3d(:,:,k)=repmat(zz(k),im,jm);
    dz_3d(:,:,k)=repmat(dz(k),im,jm);    dzz_3d(:,:,k)=repmat(dzz(k),im,jm);
end

for j=1:jm
    for i=1:im
        tsurf(i,j)=t(i,j,1);
        ssurf(i,j)=s(i,j,1);
        for k=1:kb
            tclim(i,j,k)=t(i,j,k);
            sclim(i,j,k)=s(i,j,k);
        end
    end
end
%
%                    --- EAST & WEST BCs ---
for j=1:jm
    ele(j)=0.;
    elw(j)=0.;
    % --- other vel. BCs (fixed in time) can be specified here
    uabe(j)=0.;
    uabw(j)=0.;
    for k=1:kb
        ubw(j,k)=0.;
        ube(j,k)=0.;
        tbw(j,k)=tclim(1,j,k);
        sbw(j,k)=sclim(1,j,k);
        tbe(j,k)=tclim(im,j,k);
        sbe(j,k)=sclim(im,j,k);
    end
end
%                    --- NORTH & SOUTH BCs ---
for i=1:im
    els(i)=0.;
    eln(i)=0.;
    vabs(i)=0.;
    vabn(i)=0.;
    for k=1:kb
        vbs(i,k)=0.;
        vbn(i,k)=0.;
        tbs(i,k)=tclim(i,1,k);
        sbs(i,k)=sclim(i,1,k);
        tbn(i,k)=tclim(i,jm,k);
        sbn(i,k)=sclim(i,jm,k);
    end
end
%
%     Set initial conditions:
%
tb = t;
sb = s;
ub = zeros(im,jm,kb);
vb=  zeros(im,jm,kb);
h_3d=repmat(h,1,1,kb);

%
% --- calc. Curiolis Parameter
%
for j=1:jm
    for i=1:im
        cor(i,j)=2.*7.29E-5*sin(north_e(i,j)*rad);
        elb(i,j)=0.;
        etb(i,j)=0.;
    end
end
dt=h;

for j=1:jm
    for i=2:im-1
        dx(i,j)=0.5*rad*re*sqrt(((east_e(i+1,j)-east_e(i-1,j))...
            *cos(north_e(i,j)*rad))^2+(north_e(i+1,j)-north_e(i-1,j))^2);
    end
    dx(1,j)=dx(2,j);
    dx(im,j)=dx(im-1,j);
end
%
for i=1:im
    for j=2:jm-1
        dy(i,j)=0.5*rad*re*sqrt(((east_e(i,j+1)-east_e(i,j-1))...
            *cos(north_e(i,j)*rad))^2+(north_e(i,j+1)-north_e(i,j-1))^2);
    end
    dy(i,1)=dy(i,2);
    dy(i,jm)=dy(i,jm-1);
end
%
%     Calculate areas and masks:
%
areas_masks();
[rho]=dens(sb,tb,h_3d,fsm_3d);
%
%
% --- the following grids are needed only for netcdf plotting
%
%     Corner of cell points:
%
for j=2:jm
    for i=2:im
        east_c(i,j)=(east_e(i,j)+east_e(i-1,j)...
            +east_e(i,j-1)+east_e(i-1,j-1))/4.e0;
        north_c(i,j)=(north_e(i,j)+north_e(i-1,j)...
            +north_e(i,j-1)+north_e(i-1,j-1))/4.e0;
    end
end
%
%
%     Extrapolate ends (approx.):
%
for i=2:im
    east_c(i,1)=2.*east_c(i,2)-east_c(i,3);
    north_c(i,1)=2.*north_c(i,2)-north_c(i,3);
end
east_c(1,1)=2.*east_c(2,1)-east_c(3,1);
%
for j=2:jm
    east_c(1,j)=2.*east_c(2,j)-east_c(3,j);
    north_c(1,j)=2.*north_c(2,j)-north_c(3,j);
end
north_c(1,1)=2.*north_c(1,2)-north_c(1,3);
%
%     u-points:
%
for j=1:jm-1
    for i=1:im
        east_u(i,j)=(east_c(i,j)+east_c(i,j+1))/2.e0;
        north_u(i,j)=(north_c(i,j)+north_c(i,j+1))/2.e0;
    end
end
%
%     Extrapolate ends:
%
for i=1:im
    east_u(i,jm)=(east_c(i,jm)*3.e0-east_c(i,jm-1))/2.e0;
    north_u(i,jm)=(north_c(i,jm)*3.e0-north_c(i,jm-1))/2.e0;
end
%
%     v-points:
%
for j=1:jm
    for i=1:im-1
        east_v(i,j)=(east_c(i,j)+east_c(i+1,j))/2.e0;
        north_v(i,j)=(north_c(i,j)+north_c(i+1,j))/2.e0;
    end
end
%
%     Extrapolate ends:
%
for j=1:jm
    east_v(im,j)=(east_c(im,j)*3.e0-east_c(im-1,j))/2.e0;
    north_v(im,j)=(north_c(im,j)*3.e0-north_c(im-1,j))/2.e0;
end
%
%     rot is the angle (radians, anticlockwise) of the i-axis relative
%     to east, averaged to a cell centre: (only needed for CDF plotting)
%
for j=1:jm
    for i=1:im-1
        rot(i,j)=0.;
        dlat=north_e(i+1,j)-north_e(i,j);
        dlon= east_e(i+1,j)- east_e(i,j);
        if(dlon~=0.)
            rot(i,j)=atan(dlat/dlon);
        end
    end
    rot(im,j)=rot(im-1,j);
end
%
%     Set lateral boundary conditions, for use in subroutine bcond
%     set all=0 for closed BCs.
%     Values=0 for vel BC only, =1 is combination of vel+elev.
rfe=0.e0;
rfw=0.e0;
rfn=0.e0;
rfs=0.e0;

dx_3d=repmat(dx,1,1,kb);    dy_3d=repmat(dy,1,1,kb);
cor_3d=repmat(cor,1,1,kb);  dt_3d=repmat(dt,1,1,kb);    
return
end
